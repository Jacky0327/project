
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os \n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, precision_score, classification_report, confusion_matrix, roc_curve, auc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ret_calculate(df, period_list, price_col, tickers_col) :\n",
    "    df = df.copy()\n",
    "    for period in  period_list : \n",
    "        df[f'ret{period}'] = df.groupby(tickers_col)[price_col].transform(lambda x : (x/x.shift(period))-1)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_14120\\3543637809.py:4: DtypeWarning: Columns (5,6,9,18,19,22,24,38,40,49,57) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  crsp = pd.read_csv(crsp_path)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>tickers</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>[AAL, AAMRQ, AAPL, ABI, ABS, ABT, ABX, ACKH, A...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-03</th>\n",
       "      <td>1996-01-03</td>\n",
       "      <td>[AAL, AAMRQ, AAPL, ABI, ABS, ABT, ABX, ACKH, A...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-04</th>\n",
       "      <td>1996-01-04</td>\n",
       "      <td>[AAL, AAMRQ, AAPL, ABI, ABS, ABT, ABX, ACKH, A...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-10</th>\n",
       "      <td>1996-01-10</td>\n",
       "      <td>[AAL, AAMRQ, AAPL, ABI, ABS, ABT, ABX, ACKH, A...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-11</th>\n",
       "      <td>1996-01-11</td>\n",
       "      <td>[AAL, AAMRQ, AAPL, ABI, ABS, ABT, ABX, ACKH, A...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-25</th>\n",
       "      <td>2024-03-25</td>\n",
       "      <td>[A, AAL, AAPL, ABBV, ABNB, ABT, ACGL, ACN, ADB...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-03</th>\n",
       "      <td>2024-04-03</td>\n",
       "      <td>[A, AAL, AAPL, ABBV, ABNB, ABT, ACGL, ACN, ADB...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-05-08</th>\n",
       "      <td>2024-05-08</td>\n",
       "      <td>[A, AAL, AAPL, ABBV, ABNB, ABT, ACGL, ACN, ADB...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-06-24</th>\n",
       "      <td>2024-06-24</td>\n",
       "      <td>[A, AAL, AAPL, ABBV, ABNB, ABT, ACGL, ACN, ADB...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-07-08</th>\n",
       "      <td>2024-07-08</td>\n",
       "      <td>[A, AAL, AAPL, ABBV, ABNB, ABT, ACGL, ACN, ADB...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2683 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  date                                            tickers\n",
       "time                                                                     \n",
       "1996-01-02  1996-01-02  [AAL, AAMRQ, AAPL, ABI, ABS, ABT, ABX, ACKH, A...\n",
       "1996-01-03  1996-01-03  [AAL, AAMRQ, AAPL, ABI, ABS, ABT, ABX, ACKH, A...\n",
       "1996-01-04  1996-01-04  [AAL, AAMRQ, AAPL, ABI, ABS, ABT, ABX, ACKH, A...\n",
       "1996-01-10  1996-01-10  [AAL, AAMRQ, AAPL, ABI, ABS, ABT, ABX, ACKH, A...\n",
       "1996-01-11  1996-01-11  [AAL, AAMRQ, AAPL, ABI, ABS, ABT, ABX, ACKH, A...\n",
       "...                ...                                                ...\n",
       "2024-03-25  2024-03-25  [A, AAL, AAPL, ABBV, ABNB, ABT, ACGL, ACN, ADB...\n",
       "2024-04-03  2024-04-03  [A, AAL, AAPL, ABBV, ABNB, ABT, ACGL, ACN, ADB...\n",
       "2024-05-08  2024-05-08  [A, AAL, AAPL, ABBV, ABNB, ABT, ACGL, ACN, ADB...\n",
       "2024-06-24  2024-06-24  [A, AAL, AAPL, ABBV, ABNB, ABT, ACGL, ACN, ADB...\n",
       "2024-07-08  2024-07-08  [A, AAL, AAPL, ABBV, ABNB, ABT, ACGL, ACN, ADB...\n",
       "\n",
       "[2683 rows x 2 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path = r\"C:\\Users\\USER\\Desktop\\TMBA\\data\"\n",
    "data_path = os.path.join(path, r'S&P 500 Historical Components & Changes(08-17-2024).csv')\n",
    "crsp_path = os.path.join(path, r'hxdyufxq2lneg0ly.csv')\n",
    "crsp = pd.read_csv(crsp_path)\n",
    "crsp['time'] = pd.to_datetime(crsp['date'])\n",
    "crsp.set_index('time', inplace= True)\n",
    "df = pd.read_csv(data_path)\n",
    "df['time'] = pd.to_datetime(df['date'])\n",
    "df.set_index('time', inplace= True)\n",
    "df['tickers'] = df['tickers'].str.split(',')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_14120\\1951155492.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  crsp_df['time'] = pd.to_datetime(crsp_df['date'])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>TICKER</th>\n",
       "      <th>PRC</th>\n",
       "      <th>VOL</th>\n",
       "      <th>RET</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>AMT</td>\n",
       "      <td>18.75000</td>\n",
       "      <td>23700.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-03</th>\n",
       "      <td>1996-01-03</td>\n",
       "      <td>AMT</td>\n",
       "      <td>19.12500</td>\n",
       "      <td>20800.0</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-04</th>\n",
       "      <td>1996-01-04</td>\n",
       "      <td>AMT</td>\n",
       "      <td>18.62500</td>\n",
       "      <td>65300.0</td>\n",
       "      <td>-0.026144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-05</th>\n",
       "      <td>1996-01-05</td>\n",
       "      <td>AMT</td>\n",
       "      <td>18.62500</td>\n",
       "      <td>340600.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-08</th>\n",
       "      <td>1996-01-08</td>\n",
       "      <td>AMT</td>\n",
       "      <td>18.62500</td>\n",
       "      <td>3400.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-22</th>\n",
       "      <td>2023-12-22</td>\n",
       "      <td>TSLA</td>\n",
       "      <td>252.53999</td>\n",
       "      <td>93148541.0</td>\n",
       "      <td>-0.007701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-26</th>\n",
       "      <td>2023-12-26</td>\n",
       "      <td>TSLA</td>\n",
       "      <td>256.60999</td>\n",
       "      <td>86700724.0</td>\n",
       "      <td>0.016116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-27</th>\n",
       "      <td>2023-12-27</td>\n",
       "      <td>TSLA</td>\n",
       "      <td>261.44000</td>\n",
       "      <td>106250779.0</td>\n",
       "      <td>0.018822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-28</th>\n",
       "      <td>2023-12-28</td>\n",
       "      <td>TSLA</td>\n",
       "      <td>253.17999</td>\n",
       "      <td>113250680.0</td>\n",
       "      <td>-0.031594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-29</th>\n",
       "      <td>2023-12-29</td>\n",
       "      <td>TSLA</td>\n",
       "      <td>248.48000</td>\n",
       "      <td>100321201.0</td>\n",
       "      <td>-0.018564</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6262997 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  date TICKER        PRC          VOL        RET\n",
       "time                                                            \n",
       "1996-01-02  1996-01-02    AMT   18.75000      23700.0        0.0\n",
       "1996-01-03  1996-01-03    AMT   19.12500      20800.0       0.02\n",
       "1996-01-04  1996-01-04    AMT   18.62500      65300.0  -0.026144\n",
       "1996-01-05  1996-01-05    AMT   18.62500     340600.0        0.0\n",
       "1996-01-08  1996-01-08    AMT   18.62500       3400.0        0.0\n",
       "...                ...    ...        ...          ...        ...\n",
       "2023-12-22  2023-12-22   TSLA  252.53999   93148541.0  -0.007701\n",
       "2023-12-26  2023-12-26   TSLA  256.60999   86700724.0   0.016116\n",
       "2023-12-27  2023-12-27   TSLA  261.44000  106250779.0   0.018822\n",
       "2023-12-28  2023-12-28   TSLA  253.17999  113250680.0  -0.031594\n",
       "2023-12-29  2023-12-29   TSLA  248.48000  100321201.0  -0.018564\n",
       "\n",
       "[6262997 rows x 5 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns = ['date', 'TICKER','PRC', 'VOL','RET']\n",
    "crsp_df = crsp[columns]\n",
    "crsp_df['time'] = pd.to_datetime(crsp_df['date'])\n",
    "crsp_df.set_index('time', inplace= True)\n",
    "crsp_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>tickers</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>AAL</td>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>AAMRQ</td>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>2003-03-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>ABI</td>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>2008-11-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>ABS</td>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>2006-05-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-07-08</th>\n",
       "      <td>2024-07-08</td>\n",
       "      <td>XYL</td>\n",
       "      <td>2011-11-01</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-07-08</th>\n",
       "      <td>2024-07-08</td>\n",
       "      <td>YUM</td>\n",
       "      <td>1997-10-07</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-07-08</th>\n",
       "      <td>2024-07-08</td>\n",
       "      <td>ZBH</td>\n",
       "      <td>2001-08-07</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-07-08</th>\n",
       "      <td>2024-07-08</td>\n",
       "      <td>ZBRA</td>\n",
       "      <td>2019-12-23</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-07-08</th>\n",
       "      <td>2024-07-08</td>\n",
       "      <td>ZTS</td>\n",
       "      <td>2013-06-24</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1332638 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  date tickers       start         end\n",
       "time                                                  \n",
       "1996-01-02  1996-01-02     AAL  1996-01-02  2024-07-08\n",
       "1996-01-02  1996-01-02   AAMRQ  1996-01-02  2003-03-10\n",
       "1996-01-02  1996-01-02    AAPL  1996-01-02  2024-07-08\n",
       "1996-01-02  1996-01-02     ABI  1996-01-02  2008-11-20\n",
       "1996-01-02  1996-01-02     ABS  1996-01-02  2006-05-31\n",
       "...                ...     ...         ...         ...\n",
       "2024-07-08  2024-07-08     XYL  2011-11-01  2024-07-08\n",
       "2024-07-08  2024-07-08     YUM  1997-10-07  2024-07-08\n",
       "2024-07-08  2024-07-08     ZBH  2001-08-07  2024-07-08\n",
       "2024-07-08  2024-07-08    ZBRA  2019-12-23  2024-07-08\n",
       "2024-07-08  2024-07-08     ZTS  2013-06-24  2024-07-08\n",
       "\n",
       "[1332638 rows x 4 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df1 = df.explode('tickers')\n",
    "df1['start'] = df1.groupby('tickers')['date'].transform('first')\n",
    "df1['end'] = df1.groupby('tickers')['date'].transform('last')\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1168,)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = df1['tickers'].unique()\n",
    "np.shape(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>tickers</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>AAL</td>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>AAMRQ</td>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>2003-03-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>ABI</td>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>2008-11-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996-01-02</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>ABS</td>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>2006-05-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-05-08</th>\n",
       "      <td>2024-05-08</td>\n",
       "      <td>VST</td>\n",
       "      <td>2024-05-08</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-06-24</th>\n",
       "      <td>2024-06-24</td>\n",
       "      <td>CRWD</td>\n",
       "      <td>2024-06-24</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-06-24</th>\n",
       "      <td>2024-06-24</td>\n",
       "      <td>GDDY</td>\n",
       "      <td>2024-06-24</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-06-24</th>\n",
       "      <td>2024-06-24</td>\n",
       "      <td>KKR</td>\n",
       "      <td>2024-06-24</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-07-08</th>\n",
       "      <td>2024-07-08</td>\n",
       "      <td>SW</td>\n",
       "      <td>2024-07-08</td>\n",
       "      <td>2024-07-08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1168 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  date tickers       start         end\n",
       "time                                                  \n",
       "1996-01-02  1996-01-02     AAL  1996-01-02  2024-07-08\n",
       "1996-01-02  1996-01-02   AAMRQ  1996-01-02  2003-03-10\n",
       "1996-01-02  1996-01-02    AAPL  1996-01-02  2024-07-08\n",
       "1996-01-02  1996-01-02     ABI  1996-01-02  2008-11-20\n",
       "1996-01-02  1996-01-02     ABS  1996-01-02  2006-05-31\n",
       "...                ...     ...         ...         ...\n",
       "2024-05-08  2024-05-08     VST  2024-05-08  2024-07-08\n",
       "2024-06-24  2024-06-24    CRWD  2024-06-24  2024-07-08\n",
       "2024-06-24  2024-06-24    GDDY  2024-06-24  2024-07-08\n",
       "2024-06-24  2024-06-24     KKR  2024-06-24  2024-07-08\n",
       "2024-07-08  2024-07-08      SW  2024-07-08  2024-07-08\n",
       "\n",
       "[1168 rows x 4 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tickers = df1.drop_duplicates(['tickers', 'start', 'end'])\n",
    "tickers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#輸出S&P500過去的成分股列表\n",
    "my_list = tickers['tickers'].values.tolist()\n",
    "with open(\"output.txt\", \"w\") as file:\n",
    "    # 逐行寫入\n",
    "    for item in my_list:\n",
    "        file.write(item + \"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>TICKER</th>\n",
       "      <th>PRC</th>\n",
       "      <th>VOL</th>\n",
       "      <th>RET</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>AAL</td>\n",
       "      <td>19.000</td>\n",
       "      <td>47400.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1996-01-03</td>\n",
       "      <td>AAL</td>\n",
       "      <td>19.125</td>\n",
       "      <td>58900.0</td>\n",
       "      <td>0.006579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1996-01-04</td>\n",
       "      <td>AAL</td>\n",
       "      <td>18.625</td>\n",
       "      <td>73600.0</td>\n",
       "      <td>-0.026144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1996-01-05</td>\n",
       "      <td>AAL</td>\n",
       "      <td>19.000</td>\n",
       "      <td>109000.0</td>\n",
       "      <td>0.020134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1996-01-08</td>\n",
       "      <td>AAL</td>\n",
       "      <td>19.125</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>0.006579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3342298</th>\n",
       "      <td>2023-12-22</td>\n",
       "      <td>UBER</td>\n",
       "      <td>61.710</td>\n",
       "      <td>14715609.0</td>\n",
       "      <td>0.004068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3342299</th>\n",
       "      <td>2023-12-26</td>\n",
       "      <td>UBER</td>\n",
       "      <td>61.980</td>\n",
       "      <td>16077192.0</td>\n",
       "      <td>0.004375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3342300</th>\n",
       "      <td>2023-12-27</td>\n",
       "      <td>UBER</td>\n",
       "      <td>63.280</td>\n",
       "      <td>20805951.0</td>\n",
       "      <td>0.020974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3342301</th>\n",
       "      <td>2023-12-28</td>\n",
       "      <td>UBER</td>\n",
       "      <td>63.140</td>\n",
       "      <td>13795595.0</td>\n",
       "      <td>-0.002212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3342302</th>\n",
       "      <td>2023-12-29</td>\n",
       "      <td>UBER</td>\n",
       "      <td>61.570</td>\n",
       "      <td>21615424.0</td>\n",
       "      <td>-0.024865</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3342303 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               date TICKER     PRC         VOL        RET\n",
       "0        1996-01-02    AAL  19.000     47400.0        0.0\n",
       "1        1996-01-03    AAL  19.125     58900.0   0.006579\n",
       "2        1996-01-04    AAL  18.625     73600.0  -0.026144\n",
       "3        1996-01-05    AAL  19.000    109000.0   0.020134\n",
       "4        1996-01-08    AAL  19.125     25000.0   0.006579\n",
       "...             ...    ...     ...         ...        ...\n",
       "3342298  2023-12-22   UBER  61.710  14715609.0   0.004068\n",
       "3342299  2023-12-26   UBER  61.980  16077192.0   0.004375\n",
       "3342300  2023-12-27   UBER  63.280  20805951.0   0.020974\n",
       "3342301  2023-12-28   UBER  63.140  13795595.0  -0.002212\n",
       "3342302  2023-12-29   UBER  61.570  21615424.0  -0.024865\n",
       "\n",
       "[3342303 rows x 5 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ticker_list = tickers.values.tolist()\n",
    "sp500 = []\n",
    "for stock in ticker_list :\n",
    "    a = crsp_df[crsp_df['TICKER'] == stock[1]].sort_index().loc[stock[2] : stock[3]].values.tolist()\n",
    "    sp500 += a\n",
    "sp_500 = pd.DataFrame(sp500, columns=columns)\n",
    "sp_500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>TICKER</th>\n",
       "      <th>PRC</th>\n",
       "      <th>VOL</th>\n",
       "      <th>RET</th>\n",
       "      <th>ret1</th>\n",
       "      <th>ret2</th>\n",
       "      <th>ret3</th>\n",
       "      <th>ret4</th>\n",
       "      <th>ret5</th>\n",
       "      <th>...</th>\n",
       "      <th>ret60</th>\n",
       "      <th>ret80</th>\n",
       "      <th>ret100</th>\n",
       "      <th>ret120</th>\n",
       "      <th>ret140</th>\n",
       "      <th>ret160</th>\n",
       "      <th>ret180</th>\n",
       "      <th>ret200</th>\n",
       "      <th>ret220</th>\n",
       "      <th>ret240</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1996-01-02</td>\n",
       "      <td>AAL</td>\n",
       "      <td>19.000</td>\n",
       "      <td>47400.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1996-01-03</td>\n",
       "      <td>AAL</td>\n",
       "      <td>19.125</td>\n",
       "      <td>58900.0</td>\n",
       "      <td>0.006579</td>\n",
       "      <td>0.006579</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1996-01-04</td>\n",
       "      <td>AAL</td>\n",
       "      <td>18.625</td>\n",
       "      <td>73600.0</td>\n",
       "      <td>-0.026144</td>\n",
       "      <td>-0.026144</td>\n",
       "      <td>-0.019737</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1996-01-05</td>\n",
       "      <td>AAL</td>\n",
       "      <td>19.000</td>\n",
       "      <td>109000.0</td>\n",
       "      <td>0.020134</td>\n",
       "      <td>0.020134</td>\n",
       "      <td>-0.006536</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1996-01-08</td>\n",
       "      <td>AAL</td>\n",
       "      <td>19.125</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>0.006579</td>\n",
       "      <td>0.006579</td>\n",
       "      <td>0.026846</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.006579</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3342298</th>\n",
       "      <td>2023-12-22</td>\n",
       "      <td>UBER</td>\n",
       "      <td>61.710</td>\n",
       "      <td>14715609.0</td>\n",
       "      <td>0.004068</td>\n",
       "      <td>0.004068</td>\n",
       "      <td>0.016974</td>\n",
       "      <td>-0.006600</td>\n",
       "      <td>-0.000324</td>\n",
       "      <td>-0.002425</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3342299</th>\n",
       "      <td>2023-12-26</td>\n",
       "      <td>UBER</td>\n",
       "      <td>61.980</td>\n",
       "      <td>16077192.0</td>\n",
       "      <td>0.004375</td>\n",
       "      <td>0.004375</td>\n",
       "      <td>0.008461</td>\n",
       "      <td>0.021424</td>\n",
       "      <td>-0.002254</td>\n",
       "      <td>0.004050</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3342300</th>\n",
       "      <td>2023-12-27</td>\n",
       "      <td>UBER</td>\n",
       "      <td>63.280</td>\n",
       "      <td>20805951.0</td>\n",
       "      <td>0.020974</td>\n",
       "      <td>0.020975</td>\n",
       "      <td>0.025442</td>\n",
       "      <td>0.029613</td>\n",
       "      <td>0.042848</td>\n",
       "      <td>0.018674</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3342301</th>\n",
       "      <td>2023-12-28</td>\n",
       "      <td>UBER</td>\n",
       "      <td>63.140</td>\n",
       "      <td>13795595.0</td>\n",
       "      <td>-0.002212</td>\n",
       "      <td>-0.002212</td>\n",
       "      <td>0.018716</td>\n",
       "      <td>0.023173</td>\n",
       "      <td>0.027335</td>\n",
       "      <td>0.040541</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3342302</th>\n",
       "      <td>2023-12-29</td>\n",
       "      <td>UBER</td>\n",
       "      <td>61.570</td>\n",
       "      <td>21615424.0</td>\n",
       "      <td>-0.024865</td>\n",
       "      <td>-0.024865</td>\n",
       "      <td>-0.027023</td>\n",
       "      <td>-0.006615</td>\n",
       "      <td>-0.002269</td>\n",
       "      <td>0.001790</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3342303 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               date TICKER     PRC         VOL        RET      ret1      ret2  \\\n",
       "0        1996-01-02    AAL  19.000     47400.0        0.0       NaN       NaN   \n",
       "1        1996-01-03    AAL  19.125     58900.0   0.006579  0.006579       NaN   \n",
       "2        1996-01-04    AAL  18.625     73600.0  -0.026144 -0.026144 -0.019737   \n",
       "3        1996-01-05    AAL  19.000    109000.0   0.020134  0.020134 -0.006536   \n",
       "4        1996-01-08    AAL  19.125     25000.0   0.006579  0.006579  0.026846   \n",
       "...             ...    ...     ...         ...        ...       ...       ...   \n",
       "3342298  2023-12-22   UBER  61.710  14715609.0   0.004068  0.004068  0.016974   \n",
       "3342299  2023-12-26   UBER  61.980  16077192.0   0.004375  0.004375  0.008461   \n",
       "3342300  2023-12-27   UBER  63.280  20805951.0   0.020974  0.020975  0.025442   \n",
       "3342301  2023-12-28   UBER  63.140  13795595.0  -0.002212 -0.002212  0.018716   \n",
       "3342302  2023-12-29   UBER  61.570  21615424.0  -0.024865 -0.024865 -0.027023   \n",
       "\n",
       "             ret3      ret4      ret5  ...  ret60  ret80  ret100  ret120  \\\n",
       "0             NaN       NaN       NaN  ...    NaN    NaN     NaN     NaN   \n",
       "1             NaN       NaN       NaN  ...    NaN    NaN     NaN     NaN   \n",
       "2             NaN       NaN       NaN  ...    NaN    NaN     NaN     NaN   \n",
       "3        0.000000       NaN       NaN  ...    NaN    NaN     NaN     NaN   \n",
       "4        0.000000  0.006579       NaN  ...    NaN    NaN     NaN     NaN   \n",
       "...           ...       ...       ...  ...    ...    ...     ...     ...   \n",
       "3342298 -0.006600 -0.000324 -0.002425  ...    NaN    NaN     NaN     NaN   \n",
       "3342299  0.021424 -0.002254  0.004050  ...    NaN    NaN     NaN     NaN   \n",
       "3342300  0.029613  0.042848  0.018674  ...    NaN    NaN     NaN     NaN   \n",
       "3342301  0.023173  0.027335  0.040541  ...    NaN    NaN     NaN     NaN   \n",
       "3342302 -0.006615 -0.002269  0.001790  ...    NaN    NaN     NaN     NaN   \n",
       "\n",
       "         ret140  ret160  ret180  ret200  ret220  ret240  \n",
       "0           NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "1           NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "2           NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "3           NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "4           NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "...         ...     ...     ...     ...     ...     ...  \n",
       "3342298     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "3342299     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "3342300     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "3342301     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "3342302     NaN     NaN     NaN     NaN     NaN     NaN  \n",
       "\n",
       "[3342303 rows x 36 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "period_list = [i for i in range(1,21)] + [i for i in range(40,260,20)]\n",
    "pre_data = ret_calculate(sp_500, period_list= period_list , price_col= 'PRC', tickers_col = 'TICKER')\n",
    "pre_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 3342303 entries, 1996-01-02 to 2023-12-29\n",
      "Data columns (total 40 columns):\n",
      " #   Column        Dtype         \n",
      "---  ------        -----         \n",
      " 0   index         int64         \n",
      " 1   date          datetime64[ns]\n",
      " 2   TICKER        object        \n",
      " 3   PRC           float64       \n",
      " 4   VOL           float64       \n",
      " 5   RET           object        \n",
      " 6   ret1          float64       \n",
      " 7   ret2          float64       \n",
      " 8   ret3          float64       \n",
      " 9   ret4          float64       \n",
      " 10  ret5          float64       \n",
      " 11  ret6          float64       \n",
      " 12  ret7          float64       \n",
      " 13  ret8          float64       \n",
      " 14  ret9          float64       \n",
      " 15  ret10         float64       \n",
      " 16  ret11         float64       \n",
      " 17  ret12         float64       \n",
      " 18  ret13         float64       \n",
      " 19  ret14         float64       \n",
      " 20  ret15         float64       \n",
      " 21  ret16         float64       \n",
      " 22  ret17         float64       \n",
      " 23  ret18         float64       \n",
      " 24  ret19         float64       \n",
      " 25  ret20         float64       \n",
      " 26  ret40         float64       \n",
      " 27  ret60         float64       \n",
      " 28  ret80         float64       \n",
      " 29  ret100        float64       \n",
      " 30  ret120        float64       \n",
      " 31  ret140        float64       \n",
      " 32  ret160        float64       \n",
      " 33  ret180        float64       \n",
      " 34  ret200        float64       \n",
      " 35  ret220        float64       \n",
      " 36  ret240        float64       \n",
      " 37  median        float64       \n",
      " 38  win           int32         \n",
      " 39  prdicted_win  float64       \n",
      "dtypes: datetime64[ns](1), float64(35), int32(1), int64(1), object(2)\n",
      "memory usage: 1.0+ GB\n"
     ]
    }
   ],
   "source": [
    "pre_data = pre_data.reset_index(drop = False)\n",
    "pre_data['time'] = pd.to_datetime(pre_data['date'])\n",
    "pre_data['date'] = pd.to_datetime(pre_data['date'])\n",
    "pre_data.set_index('time', inplace= True)\n",
    "pre_data['median'] = pre_data.groupby('date')['ret1'].transform('median')\n",
    "pre_data['win'] = (pre_data['ret1'] > pre_data['median']).astype(int)\n",
    "pre_data['prdicted_win'] = pre_data.groupby('TICKER')['win'].transform(lambda x : x.shift(-1))\n",
    "pre_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: 'C'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_14120\\887663012.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[0;32m     14\u001b[0m     \u001b[0mx_transaction\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpre_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpre_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'date'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m>\u001b[0m\u001b[0mtrasaction_start\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m&\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mpre_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'date'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m<\u001b[0m \u001b[0mtrasaction_end\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;36m37\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     15\u001b[0m     \u001b[0my_train\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpre_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpre_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'date'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m>\u001b[0m\u001b[0mtrain_start\u001b[0m \u001b[1;33m)\u001b[0m \u001b[1;33m&\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mpre_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'date'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m<\u001b[0m \u001b[0mtrain_end\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m     \u001b[0my_transaction\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpre_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpre_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'date'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m>\u001b[0m\u001b[0mtrasaction_start\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m&\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mpre_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'date'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m<\u001b[0m \u001b[0mtrasaction_end\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m     \u001b[0mrf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[1;33m=\u001b[0m \u001b[0mn_estimators\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtree_num\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmax_depth\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmax_depth\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m#n_estimators:樹的數量；max_depth:樹的最大深度\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 18\u001b[1;33m     \u001b[0mrf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m# 訓練模型\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     19\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_transaction\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m# 預測\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     20\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     21\u001b[0m \u001b[0my_pred\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1470\u001b[0m                 skip_parameter_validation=(\n\u001b[0;32m   1471\u001b[0m                     \u001b[0mprefer_skip_nested_validation\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mglobal_skip_validation\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1472\u001b[0m                 )\n\u001b[0;32m   1473\u001b[0m             ):\n\u001b[1;32m-> 1474\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\sklearn\\ensemble\\_forest.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    359\u001b[0m         \u001b[1;31m# Validate or convert input data\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    360\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0missparse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    361\u001b[0m             \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"sparse multilabel-indicator for y is not supported.\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    362\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 363\u001b[1;33m         X, y = self._validate_data(\n\u001b[0m\u001b[0;32m    364\u001b[0m             \u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    365\u001b[0m             \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    366\u001b[0m             \u001b[0mmulti_output\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\u001b[0m\n\u001b[0;32m    646\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[1;34m\"estimator\"\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mcheck_y_params\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    647\u001b[0m                     \u001b[0mcheck_y_params\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m{\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0mdefault_check_params\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    648\u001b[0m                 \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"y\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    649\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 650\u001b[1;33m                 \u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    651\u001b[0m             \u001b[0mout\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    652\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    653\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mcheck_params\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"ensure_2d\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\sklearn\\utils\\validation.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[0;32m   1259\u001b[0m         raise ValueError(\n\u001b[0;32m   1260\u001b[0m             \u001b[1;34mf\"{estimator_name} requires y to be passed, but the target y is None\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1261\u001b[0m         )\n\u001b[0;32m   1262\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1263\u001b[1;33m     X = check_array(\n\u001b[0m\u001b[0;32m   1264\u001b[0m         \u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1265\u001b[0m         \u001b[0maccept_sparse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1266\u001b[0m         \u001b[0maccept_large_sparse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maccept_large_sparse\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\sklearn\\utils\\validation.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[0;32m    994\u001b[0m                         )\n\u001b[0;32m    995\u001b[0m                     \u001b[0marray\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mxp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    996\u001b[0m                 \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    997\u001b[0m                     \u001b[0marray\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_asarray_with_order\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0morder\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mxp\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mxp\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 998\u001b[1;33m             \u001b[1;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mcomplex_warning\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    999\u001b[0m                 raise ValueError(\n\u001b[0;32m   1000\u001b[0m                     \u001b[1;34m\"Complex data not supported\\n{}\\n\"\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1001\u001b[0m                 ) from complex_warning\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python311\\site-packages\\sklearn\\utils\\_array_api.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(array, dtype, order, copy, xp)\u001b[0m\n\u001b[0;32m    517\u001b[0m         \u001b[1;31m# Use NumPy API to support order\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    518\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    519\u001b[0m             \u001b[0marray\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0morder\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    520\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 521\u001b[1;33m             \u001b[0marray\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0morder\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    522\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    523\u001b[0m         \u001b[1;31m# At this point array is a NumPy ndarray. We convert it to an array\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    524\u001b[0m         \u001b[1;31m# container that is consistent with the input's namespace.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32md:\\ProgramData\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, dtype, copy)\u001b[0m\n\u001b[0;32m   2149\u001b[0m     def __array__(\n\u001b[0;32m   2150\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mnpt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDTypeLike\u001b[0m \u001b[1;33m|\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mbool_t\u001b[0m \u001b[1;33m|\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2151\u001b[0m     ) -> np.ndarray:\n\u001b[0;32m   2152\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2153\u001b[1;33m         \u001b[0marr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2154\u001b[0m         if (\n\u001b[0;32m   2155\u001b[0m             \u001b[0mastype_is_view\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0marr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2156\u001b[0m             \u001b[1;32mand\u001b[0m \u001b[0musing_copy_on_write\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: could not convert string to float: 'C'"
     ]
    }
   ],
   "source": [
    "research_set = 1\n",
    "start_year = 1997\n",
    "end_year = 2000\n",
    "max_depth = 20\n",
    "tree_num = 1000\n",
    "predictors = 31\n",
    "n_estimators = int(predictors**0.5)\n",
    "\n",
    "for y in range(start_year, end_year-2) :\n",
    "    train_start = pd.to_datetime(f'{y}-01-01')\n",
    "    train_end = pd.to_datetime(f'{y+2}-12-31')\n",
    "    trasaction_start = pd.to_datetime(f'{y+3}-01-01')\n",
    "    trasaction_end = pd.to_datetime(f'{y+3}-12-31')\n",
    "    x_train = pre_data[(pre_data['date']>train_start ) & (pre_data['date'] < train_end )].iloc[:,5:37]\n",
    "    x_transaction = pre_data[(pre_data['date']>trasaction_start) & (pre_data['date'] < trasaction_end )].iloc[:,5:37]\n",
    "    y_train = pre_data[(pre_data['date']>train_start ) & (pre_data['date'] < train_end )].iloc[:,-1]\n",
    "    y_transaction = pre_data[(pre_data['date']>trasaction_start) & (pre_data['date'] < trasaction_end )].iloc[:,-1]\n",
    "    rf = RandomForestClassifier(n_estimators= n_estimators, random_state=tree_num, max_depth = max_depth) #n_estimators:樹的數量；max_depth:樹的最大深度\n",
    "    rf.fit(x_train, y_train) # 訓練模型\n",
    "    y_pred = rf.predict_proba(x_transaction) # 預測\n",
    "    \n",
    "y_pred\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
